generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================
 * ENUMS
 * ===========================
 */

enum EstadoSolicitud {
  PENDIENTE
  PAGADO
  APROBADO
  RECHAZADO
}

enum EstadoProducto {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum TipoProducto {
  SIMPLE
  VARIANTE
  DIGITAL
  SERVICIO
  BUNDLE
}

enum EstadoResena {
  PENDIENTE
  PUBLICADA
  RECHAZADA
}

enum StorageProvider {
  LOCAL
  S3
  SUPABASE
  CLOUDINARY
}

/**
 * --- NUEVOS ENUMS PARA PEDIDOS ---
 */

enum OrderStatus {
  PENDIENTE
  CONFIRMADA
  EN_PROCESO
  ENVIADA
  ENTREGADA
  CANCELADA
}

enum PaymentStatus {
  PENDIENTE
  VERIFICANDO
  PAGADA
  RECHAZADA
  REEMBOLSADA
}

enum PaymentMethod {
  TRANSFERENCIA
  OXXO
  TARJETA
  CONTRA_ENTREGA
}

enum CheckoutChannel {
  WEB
  WHATSAPP
  POS
  API
}

/**
 * ===========================
 * MEDIA (ALMACENAJE EXTERNO)
 * ===========================
 */

model Media {
  id        Int             @id @default(autoincrement())
  provider  StorageProvider
  key       String
  url       String
  mime      String?
  width     Int?
  height    Int?
  sizeBytes Int?
  checksum  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ===== Campos inversos (NO DUPLICAR) =====
  usuariosFoto           Usuario[]           @relation("UsuarioFoto")
  solicitudesComprobante SolicitudVendedor[] @relation("SolicitudComprobante")

  tiendasPortada Tienda[] @relation("TiendaPortada")
  tiendasLogo    Tienda[] @relation("TiendaLogo")
  tiendasBanner  Tienda[] @relation("TiendaBanner")

  productosDigital Producto[]       @relation("ProductoDigital")
  productoImagenes ProductoImagen[] @relation("ProductoImagenMedia")
  varianteImagenes VarianteImagen[] @relation("VarianteImagenMedia")

  // NUEVO: comprobantes de pedidos
  pedidoComprobantes Pedido[] @relation("PedidoComprobante")

  @@unique([provider, key], name: "uq_media_provider_key")
  @@index([url])
}

/**
 * ===========================
 * USUARIOS + TOKENS
 * ===========================
 */

model Usuario {
  id            Int      @id @default(autoincrement())
  nombre        String
  telefono      String   @unique
  passwordHash  String   @map("contrase√±a") // mantiene la columna existente "contrase√±a"
  suscripciones Json?
  fechaCreacion DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foto (via Media)
  fotoId Int?
  foto   Media? @relation("UsuarioFoto", fields: [fotoId], references: [id], onDelete: SetNull)

  vendedorSolicitado Boolean @default(false)
  vendedor           Boolean @default(false)

  resetTokens PasswordResetToken[]
  solicitudes SolicitudVendedor[]
  tienda      Tienda?
  resenas     Resena[]

  // NUEVO: pedidos donde este usuario fue el comprador (opcional)
  pedidos Pedido[] @relation("UsuarioPedidos")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  usuarioId Int
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([usuarioId])
  @@index([expiresAt])
}

/**
 * ===========================
 * SOLICITUDES DE VENDEDOR
 * ===========================
 */

model SolicitudVendedor {
  id        Int     @id @default(autoincrement())
  uuid      String  @unique
  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  estado EstadoSolicitud @default(PENDIENTE)

  soporteNumero String @default("528441786280")
  pagoSlug      String @unique

  // Comprobante (via Media)
  comprobanteId Int?
  comprobante   Media?  @relation("SolicitudComprobante", fields: [comprobanteId], references: [id], onDelete: SetNull)
  comentario    String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aprobadoAt  DateTime?
  rechazadoAt DateTime?

  @@index([usuarioId])
  @@index([estado])
}

/**
 * ===========================
 * SDK ADMIN
 * ===========================
 */

model SDKADMIN {
  id           Int      @id @default(1)
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("SDKADMIN")
}

/**
 * ===========================
 * TIENDA
 * ===========================
 */

model Tienda {
  id        Int     @id @default(autoincrement())
  usuarioId Int     @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  homeLayout Json?

  // Plantilla visual (string: "classic" | "cyberpunk")
  homeTemplate String @default("classic")

  // B√°sicos
  nombre      String
  descripcion String?

  // Branding (via Media)
  portadaId Int?
  portada   Media? @relation("TiendaPortada", fields: [portadaId], references: [id], onDelete: SetNull)
  logoId    Int?
  logo      Media? @relation("TiendaLogo", fields: [logoId], references: [id], onDelete: SetNull)
  bannerId  Int?
  banner    Media? @relation("TiendaBanner", fields: [bannerId], references: [id], onDelete: SetNull)

  categoria     String?
  subcategorias String[] @default([])

  // Contacto
  telefonoContacto String?
  email            String?
  horario          Json?
  ubicacionUrl     String?   // <‚Äî a√±adido: utilizado por el frontend para bot√≥n ‚ÄúUbicaci√≥n‚Äù

  // Pagos y redes
  metodosPago String[] @default([])
  redes       Json?

  // Env√≠os
  envioCobertura String?
  envioCosto     String?
  envioTiempo    String?
  devoluciones   String?

  // Personalizaci√≥n
  colorPrincipal String?

  // SEO
  seoKeywords    String[] @default([])
  seoDescripcion String?

  // P√∫blica / branding
  slug        String?   @unique
  publicUuid  String?   @unique
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  // Rutas tienda
  moneda   String? @default("MXN")
  ciudad   String?
  pais     String?
  whatsapp String?

  // üîé Nuevos para b√∫squeda/refs
  skuRef  String?  @db.VarChar(64)
  aliases String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Backrefs
  productos  Producto[]
  categorias Categoria[]
  pedidos    Pedido[]    @relation("TiendaPedidos")

  @@index([usuarioId])
  @@index([isPublished])
  @@index([nombre])
  @@index([skuRef])
}

/**
 * ===========================
 * PRODUCTOS
 * ===========================
 */

model Producto {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(cuid())
  tiendaId Int
  tienda   Tienda @relation(fields: [tiendaId], references: [id], onDelete: Cascade)

  slug        String
  nombre      String
  descripcion String?
  tipo        TipoProducto   @default(SIMPLE)
  estado      EstadoProducto @default(DRAFT)
  visible     Boolean        @default(true)
  destacado   Boolean        @default(false)

  sku       String?
  gtin      String?
  marca     String?
  condicion String?

  precio            Decimal? @db.Decimal(10, 2)
  precioComparativo Decimal? @db.Decimal(10, 2)
  costo             Decimal? @db.Decimal(10, 2)
  descuentoPct      Int?

  vistas      Int   @default(0)
  ventas      Int   @default(0)
  ratingAvg   Float @default(0)
  ratingCount Int   @default(0)

  pesoGramos      Int?
  altoCm          Decimal? @db.Decimal(10, 2)
  anchoCm         Decimal? @db.Decimal(10, 2)
  largoCm         Decimal? @db.Decimal(10, 2)
  claseEnvio      String?
  diasPreparacion Int?

  politicaDevolucion String?

  // Archivos digitales (via Media)
  digitalId      Int?
  digital        Media? @relation("ProductoDigital", fields: [digitalId], references: [id], onDelete: SetNull)
  licenciamiento Json?

  publishedAt DateTime?
  deletedAt   DateTime?

  imagenes   ProductoImagen[]
  variantes  Variante[]
  inventario Inventario?
  atributos  ProductoAtributo[]
  resenas    Resena[]
  categorias ProductoCategoria[]

  // NUEVO: l√≠neas de pedidos que referencian este producto
  lineas LineaPedido[] @relation("ProductoLineas")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tiendaId, slug], name: "uq_producto_tienda_slug")
  @@index([tiendaId, estado, visible, destacado, deletedAt], name: "idx_producto_listado")
  @@index([tiendaId, nombre])
  @@index([estado, visible])
}

/**
 * ===========================
 * MEDIOS DE PRODUCTO/VARIANTE
 * ===========================
 */

model ProductoImagen {
  id         Int      @id @default(autoincrement())
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  mediaId Int
  media   Media @relation("ProductoImagenMedia", fields: [mediaId], references: [id], onDelete: Cascade)

  alt         String?
  isPrincipal Boolean  @default(false)
  orden       Int      @default(0)
  createdAt   DateTime @default(now())

  @@unique([productoId, mediaId], name: "uq_producto_media")
  @@index([productoId])
  @@index([productoId, isPrincipal])
  @@index([productoId, orden])
}

model Variante {
  id         Int      @id @default(autoincrement())
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  nombre String?
  sku    String? // unicidad dentro del producto
  gtin   String?
  activo Boolean @default(true)

  precio            Decimal? @db.Decimal(10, 2)
  precioComparativo Decimal? @db.Decimal(10, 2)
  costo             Decimal? @db.Decimal(10, 2)

  opciones Json?

  inventario Inventario?
  imagenes   VarianteImagen[]

  // NUEVO: l√≠neas de pedidos que referencian esta variante
  lineas LineaPedido[] @relation("VarianteLineas")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productoId, sku], name: "uq_variante_producto_sku")
  @@index([productoId])
  @@index([sku])
}

model VarianteImagen {
  id         Int      @id @default(autoincrement())
  varianteId Int
  variante   Variante @relation(fields: [varianteId], references: [id], onDelete: Cascade)

  mediaId Int
  media   Media @relation("VarianteImagenMedia", fields: [mediaId], references: [id], onDelete: Cascade)

  alt       String?
  orden     Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([varianteId, mediaId], name: "uq_variante_media")
  @@index([varianteId])
  @@index([varianteId, orden])
}

/**
 * ===========================
 * INVENTARIO (1‚Äì1)
 * ===========================
 */

model Inventario {
  id Int @id @default(autoincrement())

  productoId Int?
  producto   Producto? @relation(fields: [productoId], references: [id], onDelete: Cascade)
  varianteId Int?
  variante   Variante? @relation(fields: [varianteId], references: [id], onDelete: Cascade)

  stock             Int     @default(0)
  reservado         Int     @default(0)
  umbralAlerta      Int     @default(0)
  permitirBackorder Boolean @default(false)
  gestionado        Boolean @default(true)

  ubicacion String?
  lote      String?
  caducidad DateTime?

  updatedAt DateTime @updatedAt

  @@unique([productoId], name: "uq_inventario_producto")
  @@unique([varianteId], name: "uq_inventario_variante")
  @@index([productoId])
  @@index([varianteId])
}

/**
 * ===========================
 * ATRIBUTOS FLEXIBLES
 * ===========================
 */

model ProductoAtributo {
  id         Int      @id @default(autoincrement())
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  clave      String
  valor      String

  @@unique([productoId, clave], name: "uq_producto_clave")
  @@index([productoId])
  @@index([clave])
}

/**
 * ===========================
 * TAXONOM√çA (CATEGOR√çAS)
 * ===========================
 */

model Categoria {
  id          Int         @id @default(autoincrement())
  tiendaId    Int
  tienda      Tienda      @relation(fields: [tiendaId], references: [id], onDelete: Cascade)
  nombre      String
  slug        String
  descripcion String?
  parentId    Int?
  parent      Categoria?  @relation("CategoriaToCategoria", fields: [parentId], references: [id])
  children    Categoria[] @relation("CategoriaToCategoria")
  orden       Int         @default(0)

  productos ProductoCategoria[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tiendaId, slug], name: "uq_categoria_tienda_slug")
  @@index([tiendaId, parentId])
  @@index([tiendaId, nombre])
}

model ProductoCategoria {
  productoId  Int
  categoriaId Int
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade)
  categoria   Categoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)

  @@id([productoId, categoriaId])
  @@index([categoriaId])
}

/**
 * ===========================
 * RESE√ëAS
 * ===========================
 */

model Resena {
  id            Int          @id @default(autoincrement())
  productoId    Int
  producto      Producto     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  usuarioId     Int?
  usuario       Usuario?     @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  nombrePublico String?
  rating        Int
  comentario    String?
  estado        EstadoResena @default(PENDIENTE)
  respuesta     String?
  respondidoAt  DateTime?

  createdAt DateTime @default(now())

  @@index([productoId])
  @@index([usuarioId])
  @@index([estado])
}

/**
 * ===========================
 * PEDIDOS (NUEVO)
 * ===========================
 */

model Pedido {
  id          Int    @id @default(autoincrement())
  publicToken String @unique @default(uuid())

  tiendaId Int
  tienda   Tienda @relation("TiendaPedidos", fields: [tiendaId], references: [id], onDelete: Cascade)

  // Comprador (opcionalmente ligado a usuario)
  buyerUserId  Int?
  buyerUsuario Usuario? @relation("UsuarioPedidos", fields: [buyerUserId], references: [id], onDelete: SetNull)

  buyerName  String
  buyerPhone String
  buyerEmail String?

  // Env√≠o / canal
  shippingAddress Json?
  channel         CheckoutChannel @default(WEB)

  // Estados
  status        OrderStatus   @default(PENDIENTE)
  paymentStatus PaymentStatus @default(PENDIENTE)
  paymentMethod PaymentMethod @default(TRANSFERENCIA)

  // Montos (centavos)
  subTotal     Int
  shippingCost Int    @default(0)
  total        Int
  currency     String @default("MXN")

  // Comprobante
  proofMediaId Int?
  proofMedia   Media? @relation("PedidoComprobante", fields: [proofMediaId], references: [id], onDelete: SetNull)

  // Fila / solicitud
  requested   Boolean   @default(false)
  requestedAt DateTime?
  decidedAt   DateTime?

  items LineaPedido[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tiendaId, createdAt])
  @@index([requested, requestedAt])
  @@index([status, paymentStatus])
}

model LineaPedido {
  id Int @id @default(autoincrement())

  pedidoId Int
  pedido   Pedido @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  productoId Int
  producto   Producto @relation("ProductoLineas", fields: [productoId], references: [id], onDelete: Restrict)

  varianteId Int?
  variante   Variante? @relation("VarianteLineas", fields: [varianteId], references: [id], onDelete: SetNull)

  nombre         String
  opciones       Json?
  precioUnitario Int // centavos
  cantidad       Int
  total          Int // centavos

  createdAt DateTime @default(now())

  @@index([pedidoId])
  @@index([productoId])
  @@index([varianteId])
}
