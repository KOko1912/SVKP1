generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================
 * MODELOS EXISTENTES + FLAGS
 * ===========================
 */

model Usuario {
  id            Int      @id @default(autoincrement())
  nombre        String
  telefono      String   @unique
  contrase√±a   String
  fotoUrl       String?
  suscripciones Json?
  fechaCreacion DateTime @default(now())

  // Campos para flujo de vendedor
  vendedorSolicitado Boolean @default(false)
  vendedor           Boolean @default(false)

  // Relaci√≥n con tokens de reseteo
  resetTokens PasswordResetToken[]

  // Relaci√≥n con solicitudes de vendedor
  solicitudes SolicitudVendedor[]

  // Backref 1‚Äì1 con Tienda (no crea columnas)
  tienda Tienda?

  // Backref rese√±as
  resenas Resena[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  usuarioId Int
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([usuarioId])
}

/**
 * ===========================
 * NUEVOS PARA SOLICITUD VENDEDOR
 * ===========================
 */

enum EstadoSolicitud {
  PENDIENTE
  PAGADO
  APROBADO
  RECHAZADO
}

model SolicitudVendedor {
  id        Int     @id @default(autoincrement())
  uuid      String  @unique
  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  estado EstadoSolicitud @default(PENDIENTE)

  soporteNumero String @default("528441786280")
  pagoSlug      String @unique

  comprobanteUrl String?
  comentario     String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aprobadoAt  DateTime?
  rechazadoAt DateTime?

  @@index([usuarioId])
}

model SDKADMIN {
  id           Int      @id @default(1)
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("SDKADMIN")
}

model Tienda {
  id         Int     @id @default(autoincrement())
  usuarioId  Int     @unique
  usuario    Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  homeLayout Json? // <-- NUEVO

  // B√°sicos
  nombre        String
  descripcion   String?
  portadaUrl    String?
  logoUrl       String?
  categoria     String?
  subcategorias String[]

  // Contacto
  telefonoContacto String?
  email            String?
  horario          Json?

  // Pagos y redes
  metodosPago String[]
  redes       Json?

  // Env√≠os
  envioCobertura String?
  envioCosto     String?
  envioTiempo    String?
  devoluciones   String?

  // Personalizaci√≥n
  colorPrincipal String?
  bannerPromoUrl String?

  // SEO
  seoKeywords    String[]
  seoDescripcion String?

  // üî• Publicaci√≥n (campos p√∫blicos de la tienda)
  slug        String? // slug amigable en URL
  publicUuid  String?   @unique // identificador estable para la URL p√∫blica
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Backrefs
  productos  Producto[]
  categorias Categoria[]

  @@index([usuarioId])
  @@index([slug])
}

/**
 * ===========================
 * ENUMS PRODUCTOS
 * ===========================
 */

enum EstadoProducto {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum TipoProducto {
  SIMPLE
  VARIANTE
  DIGITAL
  SERVICIO
  BUNDLE
}

enum EstadoResena {
  PENDIENTE
  PUBLICADA
  RECHAZADA
}

/**
 * ===========================
 * PRODUCTO BASE
 * ===========================
 */

model Producto {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(cuid())
  tiendaId Int
  tienda   Tienda @relation(fields: [tiendaId], references: [id], onDelete: Cascade)

  // B√°sicos
  slug        String
  nombre      String
  descripcion String?
  tipo        TipoProducto   @default(SIMPLE)
  estado      EstadoProducto @default(DRAFT)
  visible     Boolean        @default(true)
  destacado   Boolean        @default(false)

  // Comercio
  sku       String?
  gtin      String?
  marca     String?
  condicion String?

  // Precios (brutos)
  precio            Decimal? @db.Decimal(10, 2)
  precioComparativo Decimal? @db.Decimal(10, 2)
  costo             Decimal? @db.Decimal(10, 2)
  descuentoPct      Int?

  // M√©tricas
  vistas      Int   @default(0)
  ventas      Int   @default(0)
  ratingAvg   Float @default(0)
  ratingCount Int   @default(0)

  // Env√≠o (si f√≠sico)
  pesoGramos      Int?
  altoCm          Decimal? @db.Decimal(10, 2)
  anchoCm         Decimal? @db.Decimal(10, 2)
  largoCm         Decimal? @db.Decimal(10, 2)
  claseEnvio      String?
  diasPreparacion Int?

  // Pol√≠ticas / Digital
  politicaDevolucion String?
  digitalUrl         String?
  licenciamiento     Json?

  // Publicaci√≥n
  publishedAt DateTime?
  deletedAt   DateTime?

  // Relaciones
  imagenes   ProductoImagen[]
  variantes  Variante[]
  inventario Inventario?
  atributos  ProductoAtributo[]
  resenas    Resena[]
  categorias ProductoCategoria[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tiendaId, slug], name: "uq_producto_tienda_slug")
  @@index([tiendaId, estado, visible, destacado, deletedAt], name: "idx_producto_listado")
}

/**
 * ===========================
 * MEDIOS
 * ===========================
 */

model ProductoImagen {
  id          Int      @id @default(autoincrement())
  productoId  Int
  producto    Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  url         String
  alt         String?
  isPrincipal Boolean  @default(false)
  orden       Int      @default(0)
  createdAt   DateTime @default(now())
  @@unique([productoId, url])
  @@index([productoId])
}

/**
 * ===========================
 * VARIANTES + INVENTARIO
 * ===========================
 */

model Variante {
  id         Int      @id @default(autoincrement())
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  nombre String?
  sku    String? @unique
  gtin   String?
  activo Boolean @default(true)

  precio            Decimal? @db.Decimal(10, 2)
  precioComparativo Decimal? @db.Decimal(10, 2)
  costo             Decimal? @db.Decimal(10, 2)

  opciones Json? // {talla:"M", color:"Rojo"}

  inventario Inventario?
  imagenes   VarianteImagen[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productoId])
}

model VarianteImagen {
  id         Int      @id @default(autoincrement())
  varianteId Int
  variante   Variante @relation(fields: [varianteId], references: [id], onDelete: Cascade)
  url        String
  alt        String?
  orden      Int      @default(0)
  createdAt  DateTime @default(now())

  @@index([varianteId])
}

model Inventario {
  id Int @id @default(autoincrement())

  // Uno u otro
  productoId Int?
  producto   Producto? @relation(fields: [productoId], references: [id], onDelete: Cascade)
  varianteId Int?
  variante   Variante? @relation(fields: [varianteId], references: [id], onDelete: Cascade)

  stock             Int     @default(0)
  reservado         Int     @default(0)
  umbralAlerta      Int     @default(0)
  permitirBackorder Boolean @default(false)
  gestionado        Boolean @default(true)

  ubicacion String?
  lote      String?
  caducidad DateTime?

  updatedAt DateTime @updatedAt

  @@unique([productoId], name: "uq_inventario_producto")
  @@unique([varianteId], name: "uq_inventario_variante")
  @@index([productoId])
  @@index([varianteId])
}

/**
 * ===========================
 * ATRIBUTOS FLEXIBLES
 * ===========================
 */

model ProductoAtributo {
  id         Int      @id @default(autoincrement())
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  clave      String
  valor      String

  @@unique([productoId, clave], name: "uq_producto_clave")
  @@index([productoId])
}

/**
 * ===========================
 * TAXONOM√çA: CATEGOR√çAS POR TIENDA
 * ===========================
 */

model Categoria {
  id          Int         @id @default(autoincrement())
  tiendaId    Int
  tienda      Tienda      @relation(fields: [tiendaId], references: [id], onDelete: Cascade)
  nombre      String
  slug        String
  descripcion String?
  parentId    Int?
  parent      Categoria?  @relation("CategoriaToCategoria", fields: [parentId], references: [id])
  children    Categoria[] @relation("CategoriaToCategoria")
  orden       Int?

  productos ProductoCategoria[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tiendaId, slug], name: "uq_categoria_tienda_slug")
  @@index([tiendaId, parentId])
}

model ProductoCategoria {
  productoId  Int
  categoriaId Int
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade)
  categoria   Categoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)

  @@id([productoId, categoriaId])
  @@index([categoriaId])
}

/**
 * ===========================
 * RESE√ëAS / CALIFICACIONES
 * ===========================
 */

model Resena {
  id            Int          @id @default(autoincrement())
  productoId    Int
  producto      Producto     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  usuarioId     Int?
  usuario       Usuario?     @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  nombrePublico String?
  rating        Int
  comentario    String?
  estado        EstadoResena @default(PENDIENTE)
  respuesta     String?
  respondidoAt  DateTime?

  createdAt DateTime @default(now())

  @@index([productoId])
  @@index([usuarioId])
}
